{"version":3,"sources":["components/ShowDetails.js","App.js","serviceWorker.js","index.js"],"names":["ShowDetails","props","state","tvDetails","loading","id","this","fetch","then","response","json","details","setState","bg","image","medium","className","style","background","Modal","Header","closeButton","Body","Row","Col","md","name","type","runtime","summary","sm","xs","schedule","days","length","time","map","day","i","key","Component","App","showsAiring","openDetails","closeDetails","bind","res","results","Navbar","variant","Brand","alt","src","Container","item","lg","transitionDelay","show","onClick","bssize","onHide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3909dc0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Modal, Row, Col } from 'react-bootstrap';\nimport '../App.css';\nimport './ShowDetails.css';\n\nclass ShowDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tvDetails: {},\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n\n    //load TV show details from TVmaze API\n    let id = this.props.id;\n    fetch(`https://api.tvmaze.com/shows/${id}`)\n      .then(\n        (response) => response.json()\n      )\n      .then(\n        (details) => {\n          this.setState({\n            tvDetails: details,\n            loading: false\n          });\n        }\n      )\n  }\n\n  render() {\n    var bg = '';\n\n    if (this.state.tvDetails.image && this.state.tvDetails.image.medium) {\n      bg = 'url(' + this.state.tvDetails.image.medium + ')';\n    } else {\n      bg = '#333';\n    }\n\n    return (\n      <div className=\"showsDetailsContainer\">\n        <div className=\"showsDetails\" style={{ background: bg }} />\n        <div className=\"showsDetailsOverlay\">\n          <Modal.Header closeButton={true} />\n          <Modal.Body>\n            {this.state.loading ? (\n              <div>Loading...</div>\n            ) : (\n              <div>\n                <Row>\n                  <Col md={12}>\n                    <div className=\"showsTitle\">\n                      <span className=\"showsName\">\n                        {this.state.tvDetails.name}\n                      </span>\n                    </div>\n                    <div className=\"showsSubtitle\">\n                      <div> <b>Type: </b>{this.state.tvDetails.type ? this.state.tvDetails.type : ''}</div>\n                      <i className=\"fa fa-clock-o\" />\n                      {' ' + this.state.tvDetails.runtime + ' min'}\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col md={8}>\n                    <b>Summary</b>\n                    <p className=\"showsOverview\">\n                      {this.state.tvDetails.summary}\n                    </p>\n                  </Col>\n                  <Col md={4} sm={12} xs={12}>\n                  <div className=\"showsSchedule\">\n                      {this.state.tvDetails.schedule.days.length !== 0 ? (\n                        <div>\n                          <div><b>Time: </b>{this.state.tvDetails.schedule.time}</div>\n                          <div><b>Airing Days</b></div>\n                          <ul> \n                            {this.state.tvDetails.schedule.days.map((day, i) => {\n                              return <li key={i}>{day}</li>;\n                            })}\n                          </ul>\n                        </div>\n                      ) : (\n                        ''\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            )}\n          </Modal.Body>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ShowDetails;","import React, { Component } from 'react';\nimport './App.css';\nimport { Modal, Row, Col, Container, Navbar } from 'react-bootstrap';\nimport ShowDetails from './components/ShowDetails';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showsAiring: [],\n      openDetails: [],\n    };\n\n    this.closeDetails = this.closeDetails.bind(this);\n  }\n\n  //open a specific modal\n  openDetails(id) {\n    this.setState({\n      openDetails: {\n        [id]: true\n      }\n    });\n  }\n\n  //close a modal\n  closeDetails() {\n    this.setState({ openDetails: false });\n  }\n\n  handleShowDetails() {\n    this.openDetails();\n  }\n\n  componentDidMount() {\n\n    //load shows airing list from TVmaze API\n    fetch(\"https://api.tvmaze.com/schedule\")\n      .then(res => res.json())\n      .then(\n        (results) => {\n          this.setState({\n            showsAiring: results\n          });\n        })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>\n            <img\n              alt=\"\"\n              src=\"./logo.png\"\n              className=\"navbarLogo\"\n            />\n            {'Shows Airing Today in USA'}\n          </Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            {this.state.showsAiring.map((item, i) => {\n              return (\n                <Col key={i} lg={3} md={4} sm={6} xs={12}>\n                  <div\n                    style={{ transitionDelay: '0.' + i + 's' }}\n                    className=\"thumb center-block\"\n                  >\n                    <div className=\"thumbImageContainer\">\n                      <div\n                        className=\"thumbImage\"\n                        style={{\n                          background: item.show.image ?\n                            'url('+ item.show.image.medium +')' : '#333'\n                        }}\n                      />\n                      <div className=\"thumbImageOverlayContainer\"\n                        onClick={this.openDetails.bind(this, i)}\n                      >\n                        <div className=\"thumbImageOverlay\">\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"thumbTitle\">{item.show.name}</div>\n                    <div className=\"thumbAirtime\">{item.show.schedule.time}</div>\n                  </div>\n                  <Modal\n                    bssize=\"large\"\n                    show={this.state.openDetails[i] || false}\n                    onHide={this.closeDetails}\n                  >\n                    <ShowDetails id={item.show.id} />\n                  </Modal>\n                </Col>\n              );\n            })}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}